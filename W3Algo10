/*

0. Write a C program to check which number nearest to the value 100 among two given integers. Return 0 if the two numbers are equal. 
Expected Output:

95
0
99

int a > int b && <= 100 || int b > int a && <= 100
or
if (int a == int b) {
  return 0;
}

*/


/* Here is my attempt. I wasn't sure how to print the number closest to 100, so I tested numbers to see if either number in each pair was closer to 100 than to return 1, and if they were equal, to return 0. Not the correct solution I know, but I wanted to at least do something at least similar.
*/
#include <stdio.h>

int main() {
  printf("%d\n", nearestToCien(5, 95));
  printf("%d\n", nearestToCien(9, 9));
  printf("%d\n", nearestToCien(95, 41));
}

int nearestToCien(int a, int b) {
  if ((a > b && a <= 100) || (b > a && b <= 100)) {
    return 1;
  } else if (a == b) {
    return 0;
  }
} 

//Correct answer

// #include <stdio.h>
// #include <stdlib.h>
// int main(void){
//     printf("%d",test(78, 95));
//     printf("\n%d",test(95, 95));
//     printf("\n%d",test(99, 70));
//     }       
//    int test(int x, int y)
//         {
//             int n = 100;
//             int val = abs(x - n);
//             int val2 = abs(y - n);
//             return val == val2 ? 0 : (val < val2 ? x : y);
//         }

        /*
        I realize from the answer code that by subtracting the x and y variables from n (100), and by using the abs value, you can determine which number is closer. Also, I realize the ability to return statements, not just a value, such as 1 or 0.
        */
